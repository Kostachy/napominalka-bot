import logging
import re
from datetime import datetime, timedelta
from typing import Union

from aiogram import Bot, F, Router
from aiogram3_calendar import SimpleCalendar, simple_cal_callback
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from db.crud import DatetimeCRUD, UserCRUD
from sheduler import sched

from utils import FSMfill
from keybords import default_keybord, origin_keybord
from utils.lexicon import HELP_DESCRIPTION, START_DESCRIPTION

user_router = Router()


async def send_some_message(bot: Bot, message: str, chat_id: Union[int, str]):
    await bot.send_message(text="‚è∞–ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ê‚è∞", chat_id=chat_id)
    await bot.send_message(text=message, chat_id=chat_id)


@user_router.message(CommandStart())
async def get_started(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(START_DESCRIPTION, reply_markup=origin_keybord)
    if not await UserCRUD.read_user(message.from_user.id):
        await UserCRUD.add(
            user_id=message.from_user.id, username=message.from_user.username
        )


@user_router.message(Command("help"))
async def get_helped(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(HELP_DESCRIPTION, reply_markup=origin_keybord)


@user_router.message(Command(commands=["cancel"]))
@user_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="üö´–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüö´", reply_markup=origin_keybord)


@user_router.message(F.text == "–ó–∞–¥–∞—Ç—å –¥–∞—Ç—É-–≤—Ä–µ–º—è")
async def write_napominalka(message: Message, state: FSMContext):
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ",
        reply_markup=await SimpleCalendar().start_calendar(),
    )
    await state.set_state(FSMfill.choosing_date)


@user_router.message(FSMfill.choosing_date)
async def cancel_cal_date(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è –º–µ–Ω—é")


@user_router.callback_query(FSMfill.choosing_date, simple_cal_callback.filter())
async def chose_date(
        callback_query: CallbackQuery, callback_data: dict, state: FSMContext
):
    selected, selected_date = await SimpleCalendar().process_selection(
        callback_query, callback_data
    )
    if selected:
        await callback_query.message.answer(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime("%d/%m/%Y")}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MMüïë'
        )
        selected_date = str(selected_date).split("-")
        other = selected_date[-1].split()
        selected_date.pop(-1)
        selected_date.insert(2, other[0])
        selected_date = [int(i) for i in selected_date]
        await state.update_data(selected_date=selected_date)
        await state.set_state(FSMfill.choosing_time)


@user_router.message(
    FSMfill.choosing_time,
    lambda message: re.match(r"\d\d:\d\d", message.text)
)
async def chose_time(message: Message, state: FSMContext):
    selected_time = [int(i) for i in message.text.split(":")]
    await state.update_data(selected_time=selected_time)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=default_keybord)
    await state.set_state(FSMfill.choosing_func)


@user_router.message(FSMfill.choosing_time)
async def cancel_cal_time(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")


@user_router.message(
    FSMfill.choosing_func,
    F.text.in_(
        ["–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É", "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É"]
    ),
)
async def choose_func(message: Message, state: FSMContext):
    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É":
        await message.answer("‚úí–ó–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏üìí")
        await state.set_state(FSMfill.choosing_task)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É":
        datetime_date = await state.get_data()
        time_for_sheduler = datetime(
            year=datetime_date["selected_date"][0],
            month=datetime_date["selected_date"][1],
            day=datetime_date["selected_date"][2],
        ) + timedelta(
            hours=datetime_date["selected_time"][0],
            minutes=datetime_date["selected_time"][1],
        )
        try:
            job_id = await DatetimeCRUD.get_job_id(
                sch_datetime=time_for_sheduler, user_id=message.from_user.id
            )
            sched.remove_job(job_id[0])
            await DatetimeCRUD.delete(
                sch_datetime=time_for_sheduler, user_id=message.from_user.id
            )
            await message.answer(
                "‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!‚úÖ", reply_markup=origin_keybord
            )
            await state.clear()
        except Exception as err:
            logging.error(err, exc_info=True)
            await message.answer(
                "üò±–£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±\n–í–∏–¥–∏–º–æ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ",
                reply_markup=origin_keybord,
            )
            await state.clear()


@user_router.message(FSMfill.choosing_func)
async def cancel_cal_func(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")


@user_router.message(FSMfill.choosing_task, F.text)
async def write_text_napomninalki(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(tasks=message.text)
    user_data = await state.get_data()

    time_for_sheduler = datetime(
        year=user_data["selected_date"][0],
        month=user_data["selected_date"][1],
        day=user_data["selected_date"][2],
    ) + timedelta(
        hours=user_data["selected_time"][0], minutes=user_data["selected_time"][1]
    )

    await DatetimeCRUD.add(
        sch_datetime=time_for_sheduler,
        user_id=message.from_user.id,
        job_id=sched.add_job(
            func=send_some_message,
            trigger="date",
            run_date=time_for_sheduler,
            kwargs={
                "bot": bot,
                "message": user_data["tasks"],
                "chat_id": message.from_user.id,
            },
        ).id,
    )
    await message.answer(
        "‚úÖ–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!‚úÖ\n–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è",
        reply_markup=origin_keybord,
    )
    await state.clear()


@user_router.message()
async def other_messages(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é", reply_markup=origin_keybord)
